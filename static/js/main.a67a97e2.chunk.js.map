{"version":3,"sources":["store/reducer.js","store/actions.js","containers/calculator/display/scalingtext/ScalingText.js","containers/calculator/display/Display.js","components/button/button.js","containers/calculator/keypad/Keypad.js","containers/calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["initialState","value","displayValue","pendingOperand","symbol","onInputDigit","state","digit","String","onAddPeriod","indexOf","onClearDisplay","onToggleSign","charAt","substr","onAddPercentage","newValue","parseFloat","onOperating","nextSymbol","nextValue","previousValue","reducer","action","type","ScalingText","scale","this","childOffsetWidth","node","offsetWidth","nextScale","offsetParent","setState","textStyle","position","right","padding","transform","transformOrigin","display","className","props","style","ref","Component","Display","reduxValue","connect","scalingText","label","Keypad","displayLabel","console","log","onClick","onACPressed","onAddingPercent","onDigitPressed","onPeriodPressed","onOperatorPressed","dispatch","number","operator","Calculator","App","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2UAEMA,EAAe,CACnBC,MAAO,KACPC,aAAc,IACdC,gBAAgB,EAChBC,OAAQ,MAGJC,EAAe,SAACC,EAAOC,GAAW,IAC9BL,EAAiCI,EAAjCJ,aACR,OADyCI,EAAnBH,eAEb,2BACFG,GADL,IAEEJ,aAAcM,OAAOD,GACrBJ,gBAAgB,IAGX,2BACFG,GADL,IAEEJ,aAA+B,MAAjBA,EAAuBM,OAAOD,GAASL,EAAeK,KAKpEE,EAAc,SAACH,GAAW,IACtBJ,EAAiBI,EAAjBJ,aACR,OAAmC,IAA/BA,EAAaQ,QAAQ,KAChB,2BACFJ,GADL,IAEEJ,aAAcA,EAAe,MAG1BI,GAGHK,EAAiB,SAACL,GAGtB,MAAoB,MAFIA,EAAjBJ,aAGE,2BACFI,GADL,IAEEJ,aAAc,MAIlB,2BACKI,GADL,IAEEJ,aAAc,IACdD,MAAO,QAKLW,EAAe,SAACN,GAAW,IACvBJ,EAAiBI,EAAjBJ,aACR,OAAO,2BACFI,GADL,IAEEJ,aAC6B,MAA3BA,EAAaW,OAAO,GAChBX,EAAaY,OAAO,GACpB,IAAMZ,KAIVa,EAAkB,SAACT,GAAW,IAC1BJ,EAAiBI,EAAjBJ,aACFc,EAAWC,WAAWf,GAAgB,IAE5C,OAAO,2BACFI,GADL,IAEEJ,aAAcc,KAIZE,EAAc,SAACZ,EAAOa,GAAgB,IAClCjB,EAAgCI,EAAhCJ,aAAcE,EAAkBE,EAAlBF,OAAQH,EAAUK,EAAVL,MAExBmB,EAAYH,WAAWf,GAU7B,GAAc,OAAVD,EAEF,OAAO,2BACFK,GADL,IAEEL,MAAOmB,EACPjB,gBAAgB,EAChBC,OAAQe,IAKZ,GAAIf,EAAQ,CACV,IACMY,EArBW,CACjB,IAAK,SAACK,EAAeD,GAAhB,OAA8BC,EAAgBD,GACnD,IAAK,SAACC,EAAeD,GAAhB,OAA8BC,EAAgBD,GACnD,IAAK,SAACC,EAAeD,GAAhB,OAA8BC,EAAgBD,GACnD,IAAK,SAACC,EAAeD,GAAhB,OAA8BC,EAAgBD,GACnD,IAAK,SAACC,EAAeD,GAAhB,OAA8BA,IAgBPhB,GADPH,GAAS,EACoBmB,GAElD,OAAO,2BACFd,GADL,IAEEL,MAAOe,EACPd,aAAcM,OAAOQ,GACrBb,gBAAgB,EAChBC,OAAQe,MA0BCG,EAnBC,WAAmC,IAAlChB,EAAiC,uDAAzBN,EAAcuB,EAAW,uCAChD,OAAQA,EAAOC,MACb,IC/GsB,aDgHpB,OAAOnB,EAAaC,EAAOiB,EAAOhB,OACpC,IChHkB,SDiHhB,OAAOE,EAAYH,GACrB,ICpHiB,QDqHf,OAAOK,EAAeL,GACxB,IClHsB,aDmHpB,OAAOM,EAAaN,GACtB,ICzHmB,UD0HjB,OAAOS,EAAgBT,GACzB,ICrHoB,WDsHlB,OAAOY,EAAYZ,EAAOiB,EAAOnB,QACnC,QACE,OAAOE,I,0CE/EEmB,G,kNA/CbnB,MAAQ,CACNoB,MAAO,G,mEAGa,IACZA,EAAUC,KAAKrB,MAAfoB,MACFE,EAAmBD,KAAKE,KAAKC,YAE7BC,EADwBJ,KAAKE,KAAKG,aAAaF,YACXF,EAEtCF,IAAUK,IAIVA,EAAY,GACdJ,KAAKM,SAAS,CACZP,MAAOK,IAIPL,EAAQ,GACVC,KAAKM,SAAS,CACZP,MAAO,O,+BAKH,IAAD,OACCA,EAAUC,KAAKrB,MAAfoB,MACJQ,EAAY,CACdC,SAAU,WACVC,MAAO,EACPC,QAAS,qBACTC,UAAU,SAAD,OAAWZ,EAAX,aAAqBA,EAArB,KACTa,gBAAiB,QACjBC,QAAS,gBAEX,OACE,uCAAKC,UAAU,eAAkBd,KAAKe,OACpC,yBAAKC,MAAOT,EAAWU,IAAK,SAACf,GAAD,OAAW,EAAKA,KAAOA,IAChDF,KAAKe,MAAMzC,Y,GAzCI4C,cCEpBC,G,6KAEF,OACE,yBAAKL,UAAU,WACb,kBAAC,EAAD,CAAaxC,MAAO0B,KAAKe,MAAMK,kB,GAJjBF,cAiBPG,eAPS,SAAC1C,GACvB,MAAO,CACLA,MAAOA,EACPyC,WAAYzC,EAAMJ,gBAIP8C,CAAyBF,GCfzBG,EALK,SAACP,GACnB,OAAO,yBAAKD,UAAU,UAClB,2BAAYC,EAAUA,EAAMQ,SCC5BC,G,6KACM,IAAD,OACLC,EAAe,KAMjB,MAL6B,MAA5BzB,KAAKe,MAAMxC,eACZmD,QAAQC,IAAI3B,KAAKe,MAAMxC,cACvBkD,EAAe,IACfC,QAAQC,IAAIF,IAIV,yBAAKX,UAAU,UACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQA,UAAU,WAAWc,QAAS5B,KAAKe,MAAMc,YAAaN,MAAOE,IACrE,kBAAC,EAAD,CAAQX,UAAU,WAAWc,QAAW5B,KAAKe,MAAM9B,aAAcsC,MAAM,QACvE,kBAAC,EAAD,CAAQT,UAAU,WAAWc,QAAS5B,KAAKe,MAAMe,gBAAgBP,MAAM,OAEzE,yBAAKT,UAAU,aACb,kBAAC,EAAD,CACEA,UAAU,gBACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS5B,KAAKe,MAAMiB,gBACpBT,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,MAER,kBAAC,EAAD,CACET,UAAU,WACVc,QAAS,kBAAM,EAAKb,MAAMgB,eAAe,IACzCR,MAAM,QAIZ,yBAAKT,UAAU,gBACb,kBAAC,EAAD,CAAQA,UAAU,cAAec,QAAS,kBAAM,EAAKb,MAAMkB,kBAAkB,MAAMV,MAAM,SACzF,kBAAC,EAAD,CAAQT,UAAU,cAAec,QAAS,kBAAM,EAAKb,MAAMkB,kBAAkB,MAAMV,MAAM,MACzF,kBAAC,EAAD,CAAQT,UAAU,cAAec,QAAS,kBAAM,EAAKb,MAAMkB,kBAAkB,MAAMV,MAAM,MACzF,kBAAC,EAAD,CAAQT,UAAU,cAAec,QAAS,kBAAM,EAAKb,MAAMkB,kBAAkB,MAAMV,MAAM,MACzF,kBAAC,EAAD,CAAQT,UAAU,cAAec,QAAS,kBAAM,EAAKb,MAAMkB,kBAAkB,MAAMV,MAAM,Y,GAhF9EL,cAwGNG,eAjBS,SAAA1C,GACtB,MAAO,CACLL,MAAOK,EAAML,MACbC,aAAcI,EAAMJ,iBAIG,SAAC2D,GAC1B,MAAO,CACLH,eAAgB,SAACI,GAAD,OAAYD,EAAS,CAAErC,KAAM,aAAcjB,MAAOuD,KAClEH,gBAAiB,kBAAME,EAAS,CAACrC,KAAK,YACtCgC,YAAa,kBAAMK,EAAS,CAAErC,KAAM,WACpCZ,aAAc,kBAAMiD,EAAS,CAACrC,KAAM,gBACpCiC,gBAAiB,kBAAMI,EAAS,CAACrC,KAAM,aACvCoC,kBAAmB,SAACG,GAAD,OAAcF,EAAS,CAACrC,KAAM,WAAYpB,OAAQ2D,QAG1Df,CAA6CG,GC3F7Ca,G,6KATP,OACI,yBAAKvB,UAAU,cACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALSI,cCKVoB,MARf,WACE,OACE,yBAAKxB,UAAU,OACd,kBAAC,EAAD,QCKeyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAQC,YAAYlD,GAE1BmD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAKlC,UAAU,WACb,kBAAC,IAAD,CAAU8B,MAAOA,GACf,kBAAC,EAAD,SAINK,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.a67a97e2.chunk.js","sourcesContent":["import * as actionTypes from \"./actions\";\n\nconst initialState = {\n  value: null,\n  displayValue: \"0\",\n  pendingOperand: false,\n  symbol: null,\n};\n\nconst onInputDigit = (state, digit) => {\n  const { displayValue, pendingOperand } = state;\n  if (pendingOperand) {\n    return {\n      ...state,\n      displayValue: String(digit),\n      pendingOperand: false,\n    };\n  } else {\n    return {\n      ...state,\n      displayValue: displayValue === \"0\" ? String(digit) : displayValue + digit,\n    };\n  }\n};\n\nconst onAddPeriod = (state) => {\n  const { displayValue } = state;\n  if (displayValue.indexOf(\".\") === -1) {\n    return {\n      ...state,\n      displayValue: displayValue + \".\",\n    };\n  }\n  return state;\n};\n\nconst onClearDisplay = (state) => {\n  const {displayValue}  = state; \n\n  if(displayValue !== \"0\"){\n    return {\n      ...state,\n      displayValue: \"0\",\n    };\n  }\n\n  return{\n    ...state, \n    displayValue: \"0\", \n    value: null\n  }\n  \n};\n\nconst onToggleSign = (state) => {\n  const { displayValue } = state;\n  return {\n    ...state,\n    displayValue:\n      displayValue.charAt(0) === \"-\"\n        ? displayValue.substr(1)\n        : \"-\" + displayValue,\n  };\n};\n\nconst onAddPercentage = (state) => {\n  const { displayValue } = state;\n  const newValue = parseFloat(displayValue) / 100;\n\n  return {\n    ...state,\n    displayValue: newValue,\n  };\n};\n\nconst onOperating = (state, nextSymbol) => {\n  const { displayValue, symbol, value } = state;\n\n  const nextValue = parseFloat(displayValue);\n\n  const operations = {\n    \"+\": (previousValue, nextValue) => previousValue + nextValue,\n    \"-\": (previousValue, nextValue) => previousValue - nextValue,\n    \"*\": (previousValue, nextValue) => previousValue * nextValue,\n    \"/\": (previousValue, nextValue) => previousValue / nextValue,\n    \"=\": (previousValue, nextValue) => nextValue\n  };\n\n  if (value === null) {\n   \n    return {\n      ...state,\n      value: nextValue,\n      pendingOperand: true, \n      symbol: nextSymbol\n    };\n  }\n  \n\n  if (symbol) {\n    const currentValue = value || 0;\n    const newValue = operations[symbol](currentValue, nextValue);\n\n    return {\n      ...state,\n      value: newValue,\n      displayValue: String(newValue),\n      pendingOperand: true, \n      symbol: nextSymbol\n    };\n  }\n\n\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.INPUTDIGIT:\n      return onInputDigit(state, action.digit);\n    case actionTypes.PERIOD:\n      return onAddPeriod(state);\n    case actionTypes.CLEAR:\n      return onClearDisplay(state);\n    case actionTypes.TOGGLESIGN:\n      return onToggleSign(state);\n    case actionTypes.PERCENT:\n      return onAddPercentage(state);\n    case actionTypes.OPERATOR:\n      return onOperating(state, action.symbol);\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const ADD = \"ADD\"\nexport const SUBTRACT = \"SUBTRACT\"\nexport const MULTIPLY = \"MULTIPLY\"\nexport const DIVIDE = \"DIVIDE\"\nexport const PERCENT = \"PERCENT\"\nexport const CLEAR = \"CLEAR\"\nexport const INPUTDIGIT = \"INPUTDIGIT\"\nexport const PERIOD = \"PERIOD\"\nexport const EQUAL = \"EQUAL\"\nexport const TOGGLESIGN = \"TOGGLESIGN\"\nexport const OPERATOR = \"OPERATOR\"","import React, { Component } from \"react\";\nimport \"./ScalingText.css\";\n\nclass ScalingText extends Component {\n  state = {\n    scale: 1,\n  };\n\n  componentDidUpdate() {\n    const { scale } = this.state;\n    const childOffsetWidth = this.node.offsetWidth;\n    const parentNodeOffsetWidth = this.node.offsetParent.offsetWidth;\n    const nextScale = parentNodeOffsetWidth / childOffsetWidth;\n\n    if (scale === nextScale) {\n      return;\n    }\n\n    if (nextScale < 1) {\n      this.setState({\n        scale: nextScale,\n      });\n    }\n\n    if (scale < 1) {\n      this.setState({\n        scale: 1,\n      });\n    }\n  }\n\n  render() {\n    const { scale } = this.state;\n    let textStyle = {\n      position: \"absolute\",\n      right: 0,\n      padding: \"45px 5px 55px 10px\",\n      transform: `scale(${scale}, ${scale})`,\n      transformOrigin: \"right\",\n      display: \"inline-block\"\n    };\n    return (\n      <div className=\"ScalingText\" {...this.props}>\n        <div style={textStyle} ref={(node) => (this.node = node)}>\n          {this.props.value}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScalingText;\n","import React, { Component } from \"react\";\nimport ScalingText from \"./scalingtext/ScalingText\";\nimport { connect } from \"react-redux\";\nimport \"./Display.css\";\n\nclass Display extends Component {\n  render() {\n    return (\n      <div className=\"Display\">\n        <ScalingText value={this.props.reduxValue} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    state: state,\n    reduxValue: state.displayValue,\n  };\n};\n\nexport default connect(mapStateToProps)(Display);\n","import React from \"react\";\n\nconst scalingText = (props) => {\n  return <div className=\"Button\">\n      <button {...props}  >{props.label}</button>\n  </div>;\n};\nexport default scalingText;\n","import React, { Component } from \"react\";\nimport Button from \"../../../components/button/button\";\nimport { connect } from \"react-redux\";\nimport \"./Keypad.css\";\n\nclass Keypad extends Component {\n  render() {\n  let displayLabel = \"AC\"; \n  if(this.props.displayValue !== \"0\"){\n    console.log(this.props.displayValue)\n    displayLabel = \"C\"\n    console.log(displayLabel)\n  }\n    return (\n      \n      <div className=\"Keypad\">\n        <div className=\"FunctionKeys\">\n          <div className=\"UpperKeys\">\n            <Button className=\"UpperKey\" onClick={this.props.onACPressed} label={displayLabel} />\n            <Button className=\"UpperKey\" onClick = {this.props.onToggleSign} label=\"+/-\" />\n            <Button className=\"UpperKey\" onClick={this.props.onAddingPercent}label=\"%\" />\n          </div>\n          <div className=\"DigitKeys\">\n            <Button\n              className=\"DigitKey key0\"\n              onClick={() => this.props.onDigitPressed(0)}\n              label=\"0\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={this.props.onPeriodPressed}\n              label=\".\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={() => this.props.onDigitPressed(1)}\n              label=\"1\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={() => this.props.onDigitPressed(2)}\n              label=\"2\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={() => this.props.onDigitPressed(3)}\n              label=\"3\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={() => this.props.onDigitPressed(4)}\n              label=\"4\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={() => this.props.onDigitPressed(5)}\n              label=\"5\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={() => this.props.onDigitPressed(6)}\n              label=\"6\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={() => this.props.onDigitPressed(7)}\n              label=\"7\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={() => this.props.onDigitPressed(8)}\n              label=\"8\"\n            />\n            <Button\n              className=\"DigitKey\"\n              onClick={() => this.props.onDigitPressed(9)}\n              label=\"9\"\n            />\n          </div>\n        </div>\n        <div className=\"OperatorKeys\">\n          <Button className=\"OperatorKey\"  onClick={() => this.props.onOperatorPressed(\"/\")} label=\"÷\" />\n          <Button className=\"OperatorKey\"  onClick={() => this.props.onOperatorPressed(\"*\")} label=\"x\" />\n          <Button className=\"OperatorKey\"  onClick={() => this.props.onOperatorPressed(\"-\")} label=\"-\" />\n          <Button className=\"OperatorKey\"  onClick={() => this.props.onOperatorPressed(\"+\")} label=\"+\" />\n          <Button className=\"OperatorKey\"  onClick={() => this.props.onOperatorPressed(\"=\")} label=\"=\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    value: state.value, \n    displayValue: state.displayValue\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onDigitPressed: (number) => dispatch({ type: \"INPUTDIGIT\", digit: number }),\n    onPeriodPressed: () => dispatch({type:\"PERIOD\"}), \n    onACPressed: () => dispatch({ type: \"CLEAR\"}),\n    onToggleSign: () => dispatch({type: \"TOGGLESIGN\"}), \n    onAddingPercent: () => dispatch({type: \"PERCENT\"}), \n    onOperatorPressed: (operator) => dispatch({type: \"OPERATOR\", symbol: operator})\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Keypad);\n","import React, {Component} from 'react'\nimport Display from './display/Display'\nimport Keypad from './keypad/Keypad'\nimport \"./Calculator.css\"\n\n\n\nclass Calculator extends Component {\n    render(){\n        return(\n            <div className=\"Calculator\">\n                <Display />\n                <Keypad />\n            </div>\n        )\n    }\n}\n\nexport default Calculator; ","import React from 'react';\nimport './App.css';\nimport Calculator from './containers/calculator/Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Calculator /> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./store/reducer\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"wrapper\">\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}